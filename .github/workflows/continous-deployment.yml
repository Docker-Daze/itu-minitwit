---
name: Continuous Deployment

on:
  push:
    # Run workflow every time something is pushed to the main branch
    branches:
      - main
  # allow manual triggers for now too
  workflow_dispatch:
    manual: true

# Remember to set the following secrets in your repository's settings:
# https://github.com/your_username/itu-minitwit-ci/settings/secrets/actions
# DOCKER_USERNAME
# DOCKER_PASSWORD
# SSH_USER
# SSH_KEY
# SSH_HOST

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push minitwitimage
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/minitwitimage:webbuildcache,mode=max

      - name: Configure SSH to Primary Server
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/do_ssh_key
          chmod 600 ~/.ssh/do_ssh_key
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Primary Server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: |
          scp -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no -r remote_files $SSH_USER@$SSH_HOST:/minitwit 
          ssh $SSH_USER@$SSH_HOST -i ~/.ssh/do_ssh_key -o StrictHostKeyChecking=no "
            echo 'export DB_CONNECTION_STRING=\"${DB_CONNECTION_STRING}\"' >> ~/.bash_profile && \
            cd /minitwit/remote_files && \
            ./deploy.sh
          "
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Health Check Primary Server Post-deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          
          # Health check - try up to 10 times with 10 second intervals
          MAX_RETRIES=10
          RETRY_INTERVAL=5
          HEALTH_CHECK_URL="http://${{ secrets.SSH_HOST }}:8080/api/health"
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i of $MAX_RETRIES"
            
            # Use curl to check if the API is responding
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "failed")
            
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Health check successful! Server is up and running."
              break
            else
              echo "⚠️ Health check failed. HTTP status: $RESPONSE"
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "❌ Maximum retry attempts reached. Deployment may have failed."
                exit 1
              else
                echo "Retrying in $RETRY_INTERVAL seconds..."
                sleep $RETRY_INTERVAL
              fi
            fi
          done
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}

      - name: Configure SSH to Secondary Server
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH2_KEY" > ~/.ssh/do_ssh_key2
          chmod 600 ~/.ssh/do_ssh_key2
        env:
          SSH2_KEY: ${{ secrets.SSH2_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy to Secondary Server
        # Configure the ~./bash_profile and deploy.sh file on the Vagrantfile
        run: |
          scp -i ~/.ssh/do_ssh_key2 -o StrictHostKeyChecking=no -r remote_files $SSH2_USER@$SSH2_HOST:/minitwit 
          ssh $SSH2_USER@$SSH2_HOST -i ~/.ssh/do_ssh_key2 -o StrictHostKeyChecking=no "
            echo 'export DB_CONNECTION_STRING=\"${DB_CONNECTION_STRING}\"' >> ~/.bash_profile && \
            cd /minitwit/remote_files && \
            ./deploy.sh
          "
        env:
          SSH2_USER: ${{ secrets.SSH2_USER }}
          SSH2_HOST: ${{ secrets.SSH2_HOST }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Health Check Secondary Server Post-deployment
        run: |
          echo "Waiting for application to start..."
          sleep 10
          
          # Health check - try up to 10 times with 10 second intervals
          MAX_RETRIES=10
          RETRY_INTERVAL=5
          HEALTH_CHECK_URL="http://${{ secrets.SSH2_HOST }}:8080/api/health"
          
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Health check attempt $i of $MAX_RETRIES"
            
            # Use curl to check if the API is responding
            RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL || echo "failed")
            
            if [ "$RESPONSE" = "200" ]; then
              echo "✅ Health check successful! Server is up and running."
              break
            else
              echo "⚠️ Health check failed. HTTP status: $RESPONSE"
              
              if [ $i -eq $MAX_RETRIES ]; then
                echo "❌ Maximum retry attempts reached. Deployment may have failed."
                exit 1
              else
                echo "Retrying in $RETRY_INTERVAL seconds..."
                sleep $RETRY_INTERVAL
              fi
            fi
          done
        env:
          SSH2_HOST: ${{ secrets.SSH2_HOST }}